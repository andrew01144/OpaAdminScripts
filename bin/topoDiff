#!/bin/bash

usage() {
    echo "usage: opaextractsellinks > fabricfile; $(basename $0) [-ci1h] <topofile> <fabricfile>"
    echo "   -c  Connectivity only, ignore port numbers."
    echo "   -i  Exclude HFIs and HCAs."
    echo "   -1  List missing and unexpected nodes in one column."
    echo "   -h  Help, this message."
    echo "file formats:"
    echo "   topofile: NodeDesc1;PortNum1;NodeDesc2;PortNum2"
    echo "      e.g. Core01 L101A;05;Edge03;06"
    echo "   fabricfile: should be in the format generated by opaextractsellinks."
    echo "      GUID1;PortNum1;NodeType1:NodeDesc1;GUID2;PortNum2;NodeType2:NodeDesc2"
    echo "      GUID is ignored. NodeType is used by the -i option."
    echo "      e.g. 0x001175010250198c;5;SW;Core01 L101A;0x001175010265bc57;6;SW;Edge03"
    exit 2
}


# This checks the fabric topology, primarily by comparing the cable map with the fabric using sdiff.
#
# The extra complexity in this script comes from the following functionality:
#   Select the 4 required fields from the 8 fields of the opaextractsellinks record.
#   Make all port numbers %02d format to enable (eg) 2 to match with 02, and provide better sorting.
#   Orient each link in a consistent way to enable (eg) Core01;05;Edge01;06 to match with Edge01;06:Core01;05.
#   First, check for missing and unexpected nodes/switches.
#      Simplify the links sdiff by excluding links to/from these nodes, because
#      we don't need to report the links to/from them.
#   Option to ignore port numbers so that we can compare the pure connectivity.
#   Option to exclude CAs and FIs from the fabric file. The general intention is that the
#      fabricfile should be pre-trimmed to the area of interest using grep etc.
#      However, just removing the CAs and FIs will usefully tidy up most fabric files.
#   Sort before sdiff.
#   Count everything to provide useful summaries.



ignorePortNum=''
excludeAdapters=''
nodesCols=100

while getopts ':ciah1' flag; do
  case "${flag}" in
    c) ignorePortNum='y';;
    i) excludeAdapters='y';;
    a) excludeAdapters='y';;
    h) usage;;
    1) nodesCols=1;;
    *) echo "Unkown option -$OPTARG."; usage;;
  esac
done
shift $((OPTIND-1))

if [ "$#" != 2 ]; then
    echo "Needs two filenames."; usage
fi

topofile=$1	# Reference file, cable map, etc
fabricfile=$2	# links from fabric, eg opaextractsellinks
tmp=/tmp/topo	# Prefix for all tmp files


# What sortLinks() does:
# 1. Puts PortNum in %02d format.
# 2. Orients the links in a consistent way. eg Spines before Leafs. Non-intelligent, uses perl cmp.
# 3. Ignores PortNums if $ignorePortNum = y
# 4. sort: sdiff requires input files to be sorted
# 5. Make a list of nodes.

sortLinks() {
   if [ "x$ignorePortNum" != "xy" ]; then
      perl -F\; -lane '
        $a = sprintf("%s;%02d", $F[0], $F[1]);
        $b = sprintf("%s;%02d", $F[2], $F[3]);
        $c = ($a cmp $b) > 0 ? "$a;$b" : "$b;$a"; print $c' $infile | sort > $outfile
   else
      perl -F\; -lane '
        $a = $F[0];
        $b = $F[2];
        $c = ($a cmp $b) > 0 ? "$a;$b" : "$b;$a"; print $c' $infile | sort > $outfile
   fi
   perl -F\; -lane 'print $F[0]; print $F[2]' $infile | sort -u > $outfile.nodes
}

# topofile is in the format node;portnum;node;portnum
infile=$topofile; outfile=$tmp.topo; sortLinks

# fabricfile is from opaextractsellinks, in the format guid;portnum;type;node;guid;portnum;type;node
# cut the 4 fields we need, but cut does not allow us to change the order, so we use a perl one-liner.
cp $fabricfile $tmp.fabi
if [ "x$excludeAdapters" = "xy" ]; then
   nExclAdapts=$(grep -cE ';(FI|CA);' $tmp.fabi)
   grep -vE ';(FI|CA);' $tmp.fabi > $tmp.t; mv $tmp.t $tmp.fabi
else
   nExclAdapts=0
fi
perl -F\; -lane 'print "$F[3];$F[1];$F[7];$F[5]"' $tmp.fabi > $tmp.t; mv $tmp.t $tmp.fabi
infile=$tmp.fabi; outfile=$tmp.fab; sortLinks


echo "Checking nodes..."
grep -vxFf $tmp.fab.nodes  $tmp.topo.nodes > $tmp.missing
grep -vxFf $tmp.topo.nodes $tmp.fab.nodes  > $tmp.unexpected
nNdMissing=$(grep -c . $tmp.missing)
nNdUnexpected=$(grep -c . $tmp.unexpected)
nNdMatched=$(sdiff $tmp.topo.nodes $tmp.fab.nodes | grep  -vc '[<|>]')
if [ $nNdMissing -eq 0 -a $nNdUnexpected -eq 0 ]; then
    echo "  Good. No missing or unexpected nodes."
else
    if [ $nNdMissing -gt 0 ]; then
       echo "  Missing nodes ($nNdMissing):"
       column -c $nodesCols $tmp.missing    | expand | sed 's/^/    /'
    fi
    if [ $nNdUnexpected -gt 0 ]; then
       echo "  Unexpected nodes ($nNdUnexpected):"
       column -c $nodesCols $tmp.unexpected | expand | sed 's/^/    /'
    fi
fi


if true; then
    # Remove missing and unexpected nodes from the links files
    # There is no point in reporting missing/unexpected links to/from these nodes
       nExMissing=$(grep -cFf $tmp.missing    $tmp.topo)
                    grep -vFf $tmp.missing    $tmp.topo > $tmp.t; mv $tmp.t $tmp.topo
    nExUnexpected=$(grep -cFf $tmp.unexpected $tmp.fab )
                    grep -vFf $tmp.unexpected $tmp.fab  > $tmp.t; mv $tmp.t $tmp.fab
fi

echo
echo "Checking links..."
sdiff -s $tmp.topo $tmp.fab > $tmp.result
if [ "$(grep -c . $tmp.result)" -eq 0 ]; then
   echo "  Good. All links match."
else
   echo "Links in topofile                                               Links in fabricfile"
   cat $tmp.result
fi


# Summaries
nLkMatched=$(sdiff $tmp.topo $tmp.fab | grep  -vc '[<|>]')
nLkMissing=$(grep -c '<' $tmp.result)
nLkIncorrect=$(grep -c '|' $tmp.result)
nLkUnexpected=$(grep -c '>' $tmp.result)
echo
echo    "Nodes:"
echo    "  Matched: $nNdMatched, Missing: $nNdMissing, Unexpected: $nNdUnexpected"
echo    "Links:"
echo    "  Files: topofile: $(grep -c . $topofile), fabricfile: $(grep -c . $fabricfile)."
if [[ $nExMissing > 0 ]]; then
   echo "  Excluding $nExMissing links from the topofile that connect to the $nNdMissing missing nodes."
fi
if [[ $nExUnexpected > 0 ]]; then
   echo "  Excluding $nExUnexpected links from the fabricfile that connect to the $nNdUnexpected unexpected nodes."
fi
if [[ $nExclAdapts > 0 ]]; then
   echo "  Excluding $nExclAdapts links from the fabricfile that connect to HFIs or HCAs."
fi
echo    "  Matched: $nLkMatched, Missing: $nLkMissing, Incorrect: $nLkIncorrect, Unexpected: $nLkUnexpected."

if [[ $nLkIncorrect > 0 && $ignorePortNum == "" ]]; then
	echo "  Incorrect links might not break the topology. Try -c to ignore port numbers and check pure connectivity."
fi

# rm -f $tmp.*

